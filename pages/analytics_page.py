
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import os

from analytics.advanced_ai import (
    generate_correlation_analysis,
    perform_cluster_analysis,
    analyze_performance_kpis,
    generate_recommendations
)

def render(PASTA_ARQUIVOS_PARQUET, ultimo_ano):
    st.markdown('<h1><i class="material-icons" style="vertical-align: middle; margin-right: 10px;">analytics</i>Analytics Avan√ßado com IA</h1>', unsafe_allow_html=True)
    st.markdown("---")
    
    # Menu de analytics
    analytics_type = st.selectbox(
        "Selecione o tipo de an√°lise:",
        [
            '<i class="material-icons">show_chart</i> An√°lise de Correla√ß√£o',
            '<i class="material-icons">my_location</i> Segmenta√ß√£o de Aeroportos', 
            '<i class="material-icons">speed</i> KPIs de Performance',
            '<i class="material-icons">psychology</i> Previs√£o de Demanda',
            '<i class="material-icons">lightbulb</i> Recomenda√ß√µes Inteligentes'
        ]
    )
    
    st.markdown("---")
    
    if analytics_type == "üìä An√°lise de Correla√ß√£o":
        render_correlation_analysis(PASTA_ARQUIVOS_PARQUET, ultimo_ano)
    elif analytics_type == "üéØ Segmenta√ß√£o de Aeroportos":
        render_cluster_analysis(PASTA_ARQUIVOS_PARQUET, ultimo_ano)
    elif analytics_type == "üìà KPIs de Performance":
        render_kpi_analysis(PASTA_ARQUIVOS_PARQUET, ultimo_ano)
    elif analytics_type == "üîÆ Previs√£o de Demanda":
        render_demand_forecasting(PASTA_ARQUIVOS_PARQUET, ultimo_ano)
    elif analytics_type == "üí° Recomenda√ß√µes Inteligentes":
        render_ai_recommendations(PASTA_ARQUIVOS_PARQUET, ultimo_ano)

def render_correlation_analysis(PASTA_ARQUIVOS_PARQUET, ultimo_ano):
    st.markdown('<h2><i class="material-icons" style="vertical-align: middle; margin-right: 10px;">show_chart</i>An√°lise de Correla√ß√£o</h2>', unsafe_allow_html=True)
    
    # Simular matriz de correla√ß√£o
    if st.button("üîç Executar An√°lise de Correla√ß√£o", type="primary"):
        with st.spinner("Analisando correla√ß√µes entre vari√°veis..."):
            # Dados simulados para demonstra√ß√£o
            variables = ['Passageiros', 'Cargas', 'Voos Dom√©sticos', 'Voos Internacionais', 
                        'Atrasos', 'Efici√™ncia Operacional']
            
            # Matriz de correla√ß√£o simulada
            correlation_matrix = np.array([
                [1.00, 0.85, 0.92, 0.78, -0.45, 0.67],
                [0.85, 1.00, 0.76, 0.82, -0.38, 0.72],
                [0.92, 0.76, 1.00, 0.45, -0.52, 0.63],
                [0.78, 0.82, 0.45, 1.00, -0.29, 0.58],
                [-0.45, -0.38, -0.52, -0.29, 1.00, -0.76],
                [0.67, 0.72, 0.63, 0.58, -0.76, 1.00]
            ])
            
            # Heatmap de correla√ß√£o
            fig = go.Figure(data=go.Heatmap(
                z=correlation_matrix,
                x=variables,
                y=variables,
                colorscale='RdBu',
                zmid=0,
                text=correlation_matrix,
                texttemplate='%{text:.2f}',
                textfont={"size": 10},
                hoverongaps=False
            ))
            
            fig.update_layout(
                title="Matriz de Correla√ß√£o - Vari√°veis Aeroportu√°rias",
                height=500
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Insights de correla√ß√£o
            st.subheader("üéØ Insights de Correla√ß√£o")
            
            insights = [
                "üìà **Alta correla√ß√£o positiva** entre Passageiros e Voos Dom√©sticos (0.92)",
                "üì¶ **Forte rela√ß√£o** entre Cargas e Voos Internacionais (0.82)",
                "‚ö†Ô∏è **Correla√ß√£o negativa** entre Atrasos e Efici√™ncia (-0.76)",
                "üîó **Sinergia** entre volume de Passageiros e Cargas (0.85)"
            ]
            
            for insight in insights:
                st.markdown(insight)

def render_cluster_analysis(PASTA_ARQUIVOS_PARQUET, ultimo_ano):
    st.markdown('<h2><i class="material-icons" style="vertical-align: middle; margin-right: 10px;">my_location</i>Segmenta√ß√£o de Aeroportos</h2>', unsafe_allow_html=True)
    
    if st.button("üî¨ Executar An√°lise de Clusters", type="primary"):
        with st.spinner("Segmentando aeroportos por caracter√≠sticas..."):
            # Simula√ß√£o de dados de aeroportos
            aeroportos = ['GRU', 'CGH', 'BSB', 'GIG', 'SSA', 'REC', 'FOR', 'POA', 'CWB', 'BEL']
            
            # Coordenadas simuladas para clusters
            np.random.seed(42)
            x_coords = np.random.randn(len(aeroportos)) * 2
            y_coords = np.random.randn(len(aeroportos)) * 2
            
            # Definir clusters (simulado)
            clusters = [0, 0, 1, 0, 2, 2, 2, 1, 1, 2]
            cluster_names = ['Hub Principal', 'Hub Regional', 'Aeroporto Local']
            
            # Criar DataFrame
            df_clusters = pd.DataFrame({
                'Aeroporto': aeroportos,
                'X': x_coords,
                'Y': y_coords,
                'Cluster': clusters,
                'Categoria': [cluster_names[c] for c in clusters]
            })
            
            # Gr√°fico de dispers√£o dos clusters
            fig = px.scatter(
                df_clusters,
                x='X',
                y='Y',
                color='Categoria',
                text='Aeroporto',
                title="Segmenta√ß√£o de Aeroportos por Caracter√≠sticas",
                color_discrete_sequence=['#FF6B6B', '#4ECDC4', '#45B7D1']
            )
            
            fig.update_traces(textposition="middle center", textfont_size=12)
            fig.update_layout(height=500)
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Caracter√≠sticas dos clusters
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                **üè¢ Hub Principal**
                - Alto volume de passageiros
                - Muitas conex√µes internacionais
                - Infraestrutura robusta
                - Exemplos: GRU, CGH, GIG
                """)
            
            with col2:
                st.markdown("""
                **üåÜ Hub Regional**
                - Volume m√©dio de passageiros
                - Foco em rotas dom√©sticas
                - Conex√µes regionais importantes
                - Exemplos: BSB, POA, CWB
                """)
            
            with col3:
                st.markdown("""
                **üèòÔ∏è Aeroporto Local**
                - Menor volume de tr√°fego
                - Principalmente voos dom√©sticos
                - Atende demanda local/regional
                - Exemplos: SSA, REC, FOR, BEL
                """)

def render_kpi_analysis(PASTA_ARQUIVOS_PARQUET, ultimo_ano):
    st.markdown('<h2><i class="material-icons" style="vertical-align: middle; margin-right: 10px;">speed</i>KPIs de Performance</h2>', unsafe_allow_html=True)
    
    # KPIs principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Efici√™ncia Operacional",
            "87.5%",
            "‚ÜóÔ∏è +2.3%",
            help="Percentual de voos no hor√°rio"
        )
    
    with col2:
        st.metric(
            "Ocupa√ß√£o M√©dia",
            "78.2%",
            "‚ÜóÔ∏è +5.1%",
            help="Taxa de ocupa√ß√£o das aeronaves"
        )
    
    with col3:
        st.metric(
            "Satisfa√ß√£o do Cliente",
            "4.2/5",
            "‚ÜóÔ∏è +0.3",
            help="Avalia√ß√£o m√©dia dos passageiros"
        )
    
    with col4:
        st.metric(
            "Pontualidade",
            "82.1%",
            "‚ÜòÔ∏è -1.2%",
            help="Voos partindo no hor√°rio"
        )
    
    st.markdown("---")
    
    # Gr√°fico de KPIs ao longo do tempo
    if st.button("üìä Visualizar Tend√™ncias dos KPIs", type="primary"):
        meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
                'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
        
        # Dados simulados
        eficiencia = [85, 86, 88, 87, 89, 90, 88, 87, 86, 89, 88, 87]
        ocupacao = [75, 76, 78, 79, 80, 82, 81, 79, 77, 78, 79, 78]
        pontualidade = [80, 82, 83, 81, 84, 85, 82, 81, 80, 83, 82, 82]
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=meses, y=eficiencia,
            mode='lines+markers',
            name='Efici√™ncia Operacional',
            line=dict(color='#1f77b4')
        ))
        
        fig.add_trace(go.Scatter(
            x=meses, y=ocupacao,
            mode='lines+markers',
            name='Taxa de Ocupa√ß√£o',
            line=dict(color='#ff7f0e')
        ))
        
        fig.add_trace(go.Scatter(
            x=meses, y=pontualidade,
            mode='lines+markers',
            name='Pontualidade',
            line=dict(color='#2ca02c')
        ))
        
        fig.update_layout(
            title="Evolu√ß√£o dos KPIs de Performance",
            xaxis_title="M√™s",
            yaxis_title="Percentual (%)",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)

def render_demand_forecasting(PASTA_ARQUIVOS_PARQUET, ultimo_ano):
    st.markdown('<h2><i class="material-icons" style="vertical-align: middle; margin-right: 10px;">psychology</i>Previs√£o de Demanda</h2>', unsafe_allow_html=True)
    
    # Controles de previs√£o
    col1, col2 = st.columns(2)
    
    with col1:
        horizon = st.selectbox("Horizonte de Previs√£o", ["3 meses", "6 meses", "1 ano", "2 anos"])
    
    with col2:
        confidence = st.slider("N√≠vel de Confian√ßa", 80, 99, 95, help="Intervalo de confian√ßa da previs√£o")
    
    if st.button("üöÄ Gerar Previs√£o de Demanda", type="primary"):
        with st.spinner("Modelando demanda futura com IA..."):
            # Simula√ß√£o de previs√£o
            months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
            historical = [950000, 920000, 1100000, 1050000, 1200000, 1150000]
            predicted = [1180000, 1220000, 1280000, 1320000, 1380000, 1400000]
            
            # Intervalo de confian√ßa
            upper_bound = [p * 1.1 for p in predicted]
            lower_bound = [p * 0.9 for p in predicted]
            
            fig = go.Figure()
            
            # Dados hist√≥ricos
            fig.add_trace(go.Scatter(
                x=months,
                y=historical,
                mode='lines+markers',
                name='Dados Hist√≥ricos',
                line=dict(color='#1f77b4')
            ))
            
            # Previs√µes
            fig.add_trace(go.Scatter(
                x=months,
                y=predicted,
                mode='lines+markers',
                name='Previs√£o IA',
                line=dict(color='red', dash='dash')
            ))
            
            # Intervalo de confian√ßa
            fig.add_trace(go.Scatter(
                x=months + months[::-1],
                y=upper_bound + lower_bound[::-1],
                fill='toself',
                fillcolor='rgba(255,0,0,0.1)',
                line=dict(color='rgba(255,255,255,0)'),
                name=f'Intervalo {confidence}%'
            ))
            
            fig.update_layout(
                title="Previs√£o de Demanda de Passageiros",
                xaxis_title="Per√≠odo",
                yaxis_title="N√∫mero de Passageiros",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # M√©tricas da previs√£o
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Crescimento Previsto", "+21.7%", "vs per√≠odo anterior")
            
            with col2:
                st.metric("Acur√°cia do Modelo", "94.2%", "Baseado em dados hist√≥ricos")
            
            with col3:
                st.metric("Tend√™ncia", "Crescimento", "Forte demanda esperada")

def render_ai_recommendations(PASTA_ARQUIVOS_PARQUET, ultimo_ano):
    st.markdown('<h2><i class="material-icons" style="vertical-align: middle; margin-right: 10px;">lightbulb</i>Recomenda√ß√µes Inteligentes</h2>', unsafe_allow_html=True)
    
    if st.button("üß† Gerar Recomenda√ß√µes com IA", type="primary"):
        with st.spinner("Analisando dados e gerando recomenda√ß√µes..."):
            st.success("‚úÖ An√°lise conclu√≠da! Recomenda√ß√µes geradas.")
            
            # Recomenda√ß√µes por categoria
            tab1, tab2, tab3, tab4 = st.tabs([
                "üè¢ Infraestrutura", 
                "üìà Operacional", 
                "üí∞ Financeiro", 
                "üå± Sustentabilidade"
            ])
            
            with tab1:
                st.markdown("""
                **üèóÔ∏è Recomenda√ß√µes de Infraestrutura:**
                
                ‚Ä¢ **Expans√£o urgente em GRU**: Capacidade atual pr√≥xima do limite
                ‚Ä¢ **Moderniza√ß√£o em CGH**: Sistemas de bagagem precisam de upgrade
                ‚Ä¢ **Nova pista em BSB**: Demanda crescente justifica investimento
                ‚Ä¢ **Terminal cargo em GIG**: Oportunidade de crescimento no segmento
                
                **Prioridade Alta:** GRU e CGH (impacto imediato na opera√ß√£o)
                """)
            
            with tab2:
                st.markdown("""
                **‚öôÔ∏è Recomenda√ß√µes Operacionais:**
                
                ‚Ä¢ **Otimiza√ß√£o de slots**: Redistribuir hor√°rios de pico
                ‚Ä¢ **Gest√£o preditiva de atrasos**: Implementar sistema de alertas
                ‚Ä¢ **Melhoria na gest√£o de ground handling**: Reduzir tempo de turnaround
                ‚Ä¢ **Integra√ß√£o modal**: Conectar aeroportos com transporte p√∫blico
                
                **ROI Estimado:** 15-25% de melhoria na efici√™ncia
                """)
            
            with tab3:
                st.markdown("""
                **üíº Recomenda√ß√µes Financeiras:**
                
                ‚Ä¢ **Diversifica√ß√£o de receitas**: Explorar receitas n√£o-aeron√°uticas
                ‚Ä¢ **Pricing din√¢mico**: Implementar tarifas baseadas em demanda
                ‚Ä¢ **Parcerias estrat√©gicas**: Joint ventures para expans√£o
                ‚Ä¢ **Hedge cambial**: Prote√ß√£o contra flutua√ß√µes da moeda
                
                **Potencial de Aumento:** 12-18% na receita total
                """)
            
            with tab4:
                st.markdown("""
                **üåø Recomenda√ß√µes de Sustentabilidade:**
                
                ‚Ä¢ **Energia renov√°vel**: Instala√ß√£o de pain√©is solares
                ‚Ä¢ **Gest√£o de res√≠duos**: Programa de reciclagem avan√ßado
                ‚Ä¢ **Combust√≠vel sustent√°vel**: Incentivo ao SAF
                ‚Ä¢ **Carbon offset**: Programa de compensa√ß√£o de carbono
                
                **Meta:** Neutralidade carb√¥nica at√© 2030
                """)
            
            # Score de prioriza√ß√£o
            st.markdown("---")
            st.subheader("üìä Score de Prioriza√ß√£o")
            
            recommendations_df = pd.DataFrame({
                'Recomenda√ß√£o': [
                    'Expans√£o GRU',
                    'Sistema Preditivo',
                    'Energia Renov√°vel',
                    'Pricing Din√¢mico',
                    'Nova Pista BSB'
                ],
                'Impacto': [95, 85, 70, 80, 75],
                'Custo': [90, 30, 60, 25, 85],
                'Urg√™ncia': [95, 75, 40, 60, 65],
                'Score Final': [93, 80, 57, 72, 72]
            })
            
            fig = px.bar(
                recommendations_df,
                x='Score Final',
                y='Recomenda√ß√£o',
                orientation='h',
                color='Score Final',
                color_continuous_scale='Viridis',
                title="Prioriza√ß√£o de Recomenda√ß√µes (Score 0-100)"
            )
            
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
